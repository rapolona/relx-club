(function($){/*


 Copyright 2012 Google Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
var storeLocator=function(){};window.storeLocator=storeLocator;storeLocator.toRad_=function(a){return a*Math.PI/180};storeLocator.Feature=function(a,b){this.id_=a;this.name_=b};storeLocator.Feature=storeLocator.Feature;storeLocator.Feature.prototype.getId=function(){return this.id_};storeLocator.Feature.prototype.getDisplayName=function(){return this.name_};storeLocator.Feature.prototype.toString=function(){return this.getDisplayName()};storeLocator.FeatureSet=function(a){this.array_=[];this.hash_={};for(var b=0,c;c=arguments[b];b++)this.add(c)};storeLocator.FeatureSet=storeLocator.FeatureSet;storeLocator.FeatureSet.prototype.toggle=function(a){this.contains(a)?this.remove(a):this.add(a)};storeLocator.FeatureSet.prototype.contains=function(a){return a.getId()in this.hash_};storeLocator.FeatureSet.prototype.getById=function(a){return a in this.hash_?this.array_[this.hash_[a]]:null};
storeLocator.FeatureSet.prototype.add=function(a){a&&(this.array_.push(a),this.hash_[a.getId()]=this.array_.length-1)};storeLocator.FeatureSet.prototype.remove=function(a){this.contains(a)&&(this.array_[this.hash_[a.getId()]]=null,delete this.hash_[a.getId()])};storeLocator.FeatureSet.prototype.asList=function(){for(var a=[],b=0,c=this.array_.length;b<c;b++){var d=this.array_[b];null!==d&&a.push(d)}return a};storeLocator.FeatureSet.NONE=new storeLocator.FeatureSet;storeLocator.GMEDataFeed=function(a){this.tableId_=a.tableId;this.apiKey_=a.apiKey;a.propertiesModifier&&(this.propertiesModifier_=a.propertiesModifier)};storeLocator.GMEDataFeed=storeLocator.GMEDataFeed;
storeLocator.GMEDataFeed.prototype.getStores=function(a,b,c){var d=this,e=a.getCenter();a="(ST_INTERSECTS(geometry, "+this.boundsToWkt_(a)+") OR ST_DISTANCE(geometry, "+this.latLngToWkt_(e)+") \x3c 20000)";$.getJSON("https://www.googleapis.com/mapsengine/v1/tables/"+this.tableId_+"/features?callback\x3d?",{key:this.apiKey_,where:a,version:"published",maxResults:300},function(a){a=d.parse_(a);d.sortByDistance_(e,a);c(a)})};
storeLocator.GMEDataFeed.prototype.latLngToWkt_=function(a){return"ST_POINT("+a.lng()+", "+a.lat()+")"};storeLocator.GMEDataFeed.prototype.boundsToWkt_=function(a){var b=a.getNorthEast();a=a.getSouthWest();return["ST_GEOMFROMTEXT('POLYGON ((",a.lng()," ",a.lat(),", ",b.lng()," ",a.lat(),", ",b.lng()," ",b.lat(),", ",a.lng()," ",b.lat(),", ",a.lng()," ",a.lat(),"))')"].join("")};
storeLocator.GMEDataFeed.prototype.parse_=function(a){if(a.error)return window.alert(a.error.message),[];a=a.features;if(!a)return[];for(var b=[],c=0,d;d=a[c];c++){var e=d.geometry.coordinates,e=new google.maps.LatLng(e[1],e[0]);d=this.propertiesModifier_(d.properties);d=new storeLocator.Store(d.id,e,null,d);b.push(d)}return b};storeLocator.GMEDataFeed.prototype.propertiesModifier_=function(a){return a};
storeLocator.GMEDataFeed.prototype.sortByDistance_=function(a,b){b.sort(function(b,d){return b.distanceTo(a)-d.distanceTo(a)})};storeLocator.GMEDataFeedOptions=function(){};storeLocator.Panel=function(a,b){this.el_=$(a);this.el_.addClass("storelocator-panel");this.settings_=$.extend({locationSearch:!0,locationSearchLabel:"Where are you?",featureFilter:!0,directions:!0,view:null},b);this.directionsRenderer_=new google.maps.DirectionsRenderer({draggable:!0});this.directionsService_=new google.maps.DirectionsService;this.init_()};storeLocator.Panel=storeLocator.Panel;storeLocator.Panel.prototype=new google.maps.MVCObject;
storeLocator.Panel.prototype.init_=function(){var a=this;this.itemCache_={};this.settings_.view&&this.set("view",this.settings_.view);this.filter_=$('\x3cform class\x3d"storelocator-filter"/\x3e');this.el_.append(this.filter_);this.settings_.locationSearch&&(this.locationSearch_=$('\x3cdiv class\x3d"location-search"\x3e\x3ch4\x3e'+this.settings_.locationSearchLabel+"\x3c/h4\x3e\x3cinput\x3e\x3c/div\x3e"),this.filter_.append(this.locationSearch_),"undefined"!=typeof google.maps.places?this.initAutocomplete_():
this.filter_.submit(function(){var b=$("input",a.locationSearch_).val();a.searchPosition(b)}),this.filter_.submit(function(){return!1}),google.maps.event.addListener(this,"geocode",function(b){if(b.geometry){this.directionsFrom_=b.geometry.location;a.directionsVisible_&&a.renderDirections_();var c=a.get("view");c.highlight(null);var d=c.getMap();b.geometry.viewport?d.fitBounds(b.geometry.viewport):(d.setCenter(b.geometry.location),d.setZoom(13));c.refreshView();a.listenForStoresUpdate_()}else a.searchPosition(b.name)}));
if(this.settings_.featureFilter){this.featureFilter_=$('\x3cdiv class\x3d"feature-filter"/\x3e');for(var b=this.get("view").getFeatures().asList(),c=0,d=b.length;c<d;c++){var e=b[c],f=$('\x3cinput type\x3d"checkbox"/\x3e');f.data("feature",e);$("\x3clabel/\x3e").append(f).append(e.getDisplayName()).appendTo(this.featureFilter_)}this.filter_.append(this.featureFilter_);this.featureFilter_.find("input").change(function(){var b=$(this).data("feature");a.toggleFeatureFilter_(b);a.get("view").refreshView()})}this.storeList_=
$('\x3cul class\x3d"store-list"/\x3e');this.el_.append(this.storeList_);this.settings_.directions&&(this.directionsPanel_=$('\x3cdiv class\x3d"directions-panel"\x3e\x3cform\x3e\x3cinput class\x3d"directions-to"/\x3e\x3cinput type\x3d"submit" value\x3d"Find directions"/\x3e\x3ca href\x3d"#" class\x3d"close-directions"\x3eClose\x3c/a\x3e\x3c/form\x3e\x3cdiv class\x3d"rendered-directions"\x3e\x3c/div\x3e\x3c/div\x3e'),this.directionsPanel_.find(".directions-to").attr("readonly","readonly"),this.directionsPanel_.hide(),
this.directionsVisible_=!1,this.directionsPanel_.find("form").submit(function(){a.renderDirections_();return!1}),this.directionsPanel_.find(".close-directions").click(function(){a.hideDirections()}),this.el_.append(this.directionsPanel_))};storeLocator.Panel.prototype.toggleFeatureFilter_=function(a){var b=this.get("featureFilter");b.toggle(a);this.set("featureFilter",b)};storeLocator.geocoder_=new google.maps.Geocoder;
storeLocator.Panel.prototype.listenForStoresUpdate_=function(){var a=this,b=this.get("view");this.storesChangedListener_&&google.maps.event.removeListener(this.storesChangedListener_);this.storesChangedListener_=google.maps.event.addListenerOnce(b,"stores_changed",function(){a.set("stores",b.get("stores"))})};
storeLocator.Panel.prototype.searchPosition=function(a){var b=this;a={address:a,bounds:this.get("view").getMap().getBounds()};storeLocator.geocoder_.geocode(a,function(a,d){d==google.maps.GeocoderStatus.OK&&google.maps.event.trigger(b,"geocode",a[0])})};storeLocator.Panel.prototype.setView=function(a){this.set("view",a)};
storeLocator.Panel.prototype.view_changed=function(){var a=this.get("view");this.bindTo("selectedStore",a);var b=this;this.geolocationListener_&&google.maps.event.removeListener(this.geolocationListener_);this.zoomListener_&&google.maps.event.removeListener(this.zoomListener_);this.idleListener_&&google.maps.event.removeListener(this.idleListener_);a.getMap().getCenter();var c=function(){a.clearMarkers();b.listenForStoresUpdate_()};this.geolocationListener_=google.maps.event.addListener(a,"load",
c);this.zoomListener_=google.maps.event.addListener(a.getMap(),"zoom_changed",c);this.idleListener_=google.maps.event.addListener(a.getMap(),"idle",function(){return b.idle_(a.getMap())});c();this.bindTo("featureFilter",a);this.autoComplete_&&this.autoComplete_.bindTo("bounds",a.getMap())};
storeLocator.Panel.prototype.initAutocomplete_=function(){var a=this,b=$("input",this.locationSearch_)[0];this.autoComplete_=new google.maps.places.Autocomplete(b);this.get("view")&&this.autoComplete_.bindTo("bounds",this.get("view").getMap());google.maps.event.addListener(this.autoComplete_,"place_changed",function(){google.maps.event.trigger(a,"geocode",this.getPlace())})};
storeLocator.Panel.prototype.idle_=function(a){this.center_?a.getBounds().contains(this.center_)||(this.center_=a.getCenter(),this.listenForStoresUpdate_()):this.center_=a.getCenter()};storeLocator.Panel.NO_STORES_HTML_='\x3cli class\x3d"no-stores"\x3eThere are no stores in this area.\x3c/li\x3e';storeLocator.Panel.NO_STORES_IN_VIEW_HTML_='\x3cli class\x3d"no-stores"\x3eThere are no stores in this area. However, stores closest to you are listed below.\x3c/li\x3e';
storeLocator.Panel.prototype.stores_changed=function(){if(this.get("stores")){var a=this.get("view"),b=a&&a.getMap().getBounds(),c=this.get("stores"),d=this.get("selectedStore");this.storeList_.empty();c.length?b&&!b.contains(c[0].getLocation())&&this.storeList_.append(storeLocator.Panel.NO_STORES_IN_VIEW_HTML_):this.storeList_.append(storeLocator.Panel.NO_STORES_HTML_);for(var b=function(){a.highlight(this.store,!0)},e=0,f=Math.min(10,c.length);e<f;e++){var g=c[e].getInfoPanelItem();g.store=c[e];
d&&c[e].getId()==d.getId()&&$(g).addClass("highlighted");g.clickHandler_||(g.clickHandler_=google.maps.event.addDomListener(g,"click",b));this.storeList_.append(g)}}};
storeLocator.Panel.prototype.selectedStore_changed=function(){$(".highlighted",this.storeList_).removeClass("highlighted");var a=this,b=this.get("selectedStore");if(b){this.directionsTo_=b;this.storeList_.find("#store-"+b.getId()).addClass("highlighted");this.settings_.directions&&this.directionsPanel_.find(".directions-to").val(b.getDetails().title);var c=a.get("view").getInfoWindow().getContent(),d=$("\x3ca/\x3e").text("Directions").attr("href","#").addClass("action").addClass("directions"),e=$("\x3ca/\x3e").text("Zoom here").attr("href",
"#").addClass("action").addClass("zoomhere"),f=$("\x3ca/\x3e").text("Street view").attr("href","#").addClass("action").addClass("streetview");d.click(function(){a.showDirections();return!1});e.click(function(){a.get("view").getMap().setOptions({center:b.getLocation(),zoom:16})});f.click(function(){var c=a.get("view").getMap().getStreetView();c.setPosition(b.getLocation());c.setVisible(!0)});$(c).append(d).append(e).append(f)}};
storeLocator.Panel.prototype.hideDirections=function(){this.directionsVisible_=!1;this.directionsPanel_.fadeOut();this.featureFilter_.fadeIn();this.storeList_.fadeIn();this.directionsRenderer_.setMap(null)};
storeLocator.Panel.prototype.showDirections=function(){var a=this.get("selectedStore");this.featureFilter_.fadeOut();this.storeList_.fadeOut();this.directionsPanel_.find(".directions-to").val(a.getDetails().title);this.directionsPanel_.fadeIn();this.renderDirections_();this.directionsVisible_=!0};
storeLocator.Panel.prototype.renderDirections_=function(){var a=this;if(this.directionsFrom_&&this.directionsTo_){var b=this.directionsPanel_.find(".rendered-directions").empty();this.directionsService_.route({origin:this.directionsFrom_,destination:this.directionsTo_.getLocation(),travelMode:google.maps.DirectionsTravelMode.DRIVING},function(c,d){if(d==google.maps.DirectionsStatus.OK){var e=a.directionsRenderer_;e.setPanel(b[0]);e.setMap(a.get("view").getMap());e.setDirections(c)}})}};
storeLocator.Panel.prototype.featureFilter_changed=function(){this.listenForStoresUpdate_()};storeLocator.PanelOptions=function(){};storeLocator.StaticDataFeed=function(){this.stores_=[]};storeLocator.StaticDataFeed=storeLocator.StaticDataFeed;storeLocator.StaticDataFeed.prototype.setStores=function(a){this.stores_=a;this.firstCallback_?this.firstCallback_():delete this.firstCallback_};
storeLocator.StaticDataFeed.prototype.getStores=function(a,b,c){if(this.stores_.length){for(var d=[],e=0,f;f=this.stores_[e];e++)f.hasAllFeatures(b)&&d.push(f);this.sortByDistance_(a.getCenter(),d);c(d)}else{var g=this;this.firstCallback_=function(){g.getStores(a,b,c)}}};storeLocator.StaticDataFeed.prototype.sortByDistance_=function(a,b){b.sort(function(b,d){return b.distanceTo(a)-d.distanceTo(a)})};/*

  Latitude/longitude spherical geodesy formulae & scripts
  (c) Chris Veness 2002-2010
  www.movable-type.co.uk/scripts/latlong.html
*/
storeLocator.Store=function(a,b,c,d){this.id_=a;this.location_=b;this.features_=c||storeLocator.FeatureSet.NONE;this.props_=d||{}};storeLocator.Store=storeLocator.Store;storeLocator.Store.prototype.setMarker=function(a){this.marker_=a;google.maps.event.trigger(this,"marker_changed",a)};storeLocator.Store.prototype.getMarker=function(){return this.marker_};storeLocator.Store.prototype.getId=function(){return this.id_};storeLocator.Store.prototype.getLocation=function(){return this.location_};
storeLocator.Store.prototype.getFeatures=function(){return this.features_};storeLocator.Store.prototype.hasFeature=function(a){return this.features_.contains(a)};storeLocator.Store.prototype.hasAllFeatures=function(a){if(!a)return!0;a=a.asList();for(var b=0,c=a.length;b<c;b++)if(!this.hasFeature(a[b]))return!1;return!0};storeLocator.Store.prototype.getDetails=function(){return this.props_};
storeLocator.Store.prototype.generateFieldsHTML_=function(a){for(var b=[],c=0,d=a.length;c<d;c++){var e=a[c];this.props_[e]&&(b.push('\x3cdiv class\x3d"'),b.push(e),b.push('"\x3e'),b.push(this.props_[e]),b.push("\x3c/div\x3e"))}return b.join("")};
storeLocator.Store.prototype.generateFeaturesHTML_=function(){var a=[];a.push('\x3cul class\x3d"features"\x3e');for(var b=this.features_.asList(),c=0,d;d=b[c];c++)a.push("\x3cli\x3e"),a.push(d.getDisplayName()),a.push("\x3c/li\x3e");a.push("\x3c/ul\x3e");return a.join("")};
storeLocator.Store.prototype.getInfoWindowContent=function(){if(!this.content_){var a=['\x3cdiv class\x3d"store"\x3e'];a.push(this.generateFieldsHTML_(["title","address","phone","misc","web"]));a.push(this.generateFeaturesHTML_());a.push("\x3c/div\x3e");this.content_=a.join("")}return this.content_};storeLocator.Store.prototype.getInfoPanelContent=function(){return this.getInfoWindowContent()};storeLocator.Store.infoPanelCache_={};
storeLocator.Store.prototype.getInfoPanelItem=function(){var a=storeLocator.Store.infoPanelCache_,b=this.getId();if(!a[b]){var c=this.getInfoPanelContent();a[b]=$('\x3cli class\x3d"store" id\x3d"store-'+this.getId()+'"\x3e'+c+"\x3c/li\x3e")[0]}return a[b]};
storeLocator.Store.prototype.distanceTo=function(a){var b=this.getLocation(),c=storeLocator.toRad_(b.lat()),d=storeLocator.toRad_(b.lng()),b=storeLocator.toRad_(a.lat()),e=storeLocator.toRad_(a.lng());a=b-c;d=e-d;c=Math.sin(a/2)*Math.sin(a/2)+Math.cos(c)*Math.cos(b)*Math.sin(d/2)*Math.sin(d/2);return 12742*Math.atan2(Math.sqrt(c),Math.sqrt(1-c))};storeLocator.DataFeed=function(){};storeLocator.DataFeed=storeLocator.DataFeed;storeLocator.DataFeed.prototype.getStores=function(a,b,c){};storeLocator.View=function(a,b,c){this.map_=a;this.data_=b;this.settings_=$.extend({updateOnPan:!0,geolocation:!0,features:new storeLocator.FeatureSet},c);this.init_();google.maps.event.trigger(this,"load");this.set("featureFilter",new storeLocator.FeatureSet)};storeLocator.View=storeLocator.View;storeLocator.View.prototype=new google.maps.MVCObject;
storeLocator.View.prototype.geolocate_=function(){var a=this;window.navigator&&navigator.geolocation&&navigator.geolocation.getCurrentPosition(function(b){b=new google.maps.LatLng(b.coords.latitude,b.coords.longitude);a.getMap().setCenter(b);a.getMap().setZoom(11);google.maps.event.trigger(a,"load")},void 0,{maximumAge:6E4,timeout:1E4})};
storeLocator.View.prototype.init_=function(){this.settings_.geolocation&&this.geolocate_();this.markerCache_={};this.infoWindow_=new google.maps.InfoWindow;var a=this,b=this.getMap();this.set("updateOnPan",this.settings_.updateOnPan);google.maps.event.addListener(this.infoWindow_,"closeclick",function(){a.highlight(null)});google.maps.event.addListener(b,"click",function(){a.highlight(null);a.infoWindow_.close()})};
storeLocator.View.prototype.updateOnPan_changed=function(){this.updateOnPanListener_&&google.maps.event.removeListener(this.updateOnPanListener_);if(this.get("updateOnPan")&&this.getMap()){var a=this,b=this.getMap();this.updateOnPanListener_=google.maps.event.addListener(b,"idle",function(){a.refreshView()})}};
storeLocator.View.prototype.addStoreToMap=function(a){var b=this.getMarker(a);a.setMarker(b);var c=this;b.clickListener_=google.maps.event.addListener(b,"click",function(){c.highlight(a,!1)});b.getMap()!=this.getMap()&&b.setMap(this.getMap())};storeLocator.View.prototype.createMarker=function(a){a={position:a.getLocation()};var b=this.settings_.markerIcon;b&&(a.icon=b);return new google.maps.Marker(a)};
storeLocator.View.prototype.getMarker=function(a){var b=this.markerCache_,c=a.getId();b[c]||(b[c]=this.createMarker(a));return b[c]};storeLocator.View.prototype.getInfoWindow=function(a){if(!a)return this.infoWindow_;a=$(a.getInfoWindowContent());this.infoWindow_.setContent(a[0]);return this.infoWindow_};storeLocator.View.prototype.getFeatures=function(){return this.settings_.features};
storeLocator.View.prototype.getFeatureById=function(a){if(!this.featureById_){this.featureById_={};for(var b=0,c;c=this.settings_.features[b];b++)this.featureById_[c.getId()]=c}return this.featureById_[a]};storeLocator.View.prototype.featureFilter_changed=function(){google.maps.event.trigger(this,"featureFilter_changed",this.get("featureFilter"));this.get("stores")&&this.clearMarkers()};
storeLocator.View.prototype.clearMarkers=function(){for(var a in this.markerCache_){this.markerCache_[a].setMap(null);var b=this.markerCache_[a].clickListener_;b&&google.maps.event.removeListener(b)}};storeLocator.View.prototype.refreshView=function(){var a=this;this.data_.getStores(this.getMap().getBounds(),this.get("featureFilter"),function(b){var c=a.get("stores");if(c)for(var d=0,e=c.length;d<e;d++)google.maps.event.removeListener(c[d].getMarker().clickListener_);a.set("stores",b)})};
storeLocator.View.prototype.stores_changed=function(){for(var a=this.get("stores"),b=0,c;c=a[b];b++)this.addStoreToMap(c)};storeLocator.View.prototype.getMap=function(){return this.map_};
storeLocator.View.prototype.highlight=function(a,b){var c=this.getInfoWindow(a);a?(c=this.getInfoWindow(a),a.getMarker()?c.open(this.getMap(),a.getMarker()):(c.setPosition(a.getLocation()),c.open(this.getMap())),b&&this.getMap().panTo(a.getLocation()),this.getMap().getStreetView().getVisible()&&this.getMap().getStreetView().setPosition(a.getLocation())):c.close();this.set("selectedStore",a)};
storeLocator.View.prototype.selectedStore_changed=function(){google.maps.event.trigger(this,"selectedStore_changed",this.get("selectedStore"))};storeLocator.ViewOptions=function(){};})(jQuery);



// ==ClosureCompiler==
// @compilation_level ADVANCED_OPTIMIZATIONS
// @externs_url http://closure-compiler.googlecode.com/svn/trunk/contrib/externs/maps/google_maps_api_v3.js
// @output_wrapper (function() {%output%})();
// ==/ClosureCompiler==

/**
 * @license
 * Copyright 2013 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A RichMarker that allows any HTML/DOM to be added to a map and be draggable.
 *
 * @param {Object.<string, *>=} opt_options Optional properties to set.
 * @extends {google.maps.OverlayView}
 * @constructor
 */
function RichMarker(opt_options) {
  var options = opt_options || {};

  /**
   * @type {boolean}
   * @private
   */
  this.ready_ = false;

  /**
   * @type {boolean}
   * @private
   */
  this.dragging_ = false;

  if (opt_options['visible'] == undefined) {
    opt_options['visible'] = true;
  }

  if (opt_options['shadow'] == undefined) {
    opt_options['shadow'] = '7px -3px 5px rgba(88,88,88,0.7)';
  }

  if (opt_options['anchor'] == undefined) {
    opt_options['anchor'] = RichMarkerPosition['BOTTOM'];
  }

  this.setValues(options);
}
RichMarker.prototype = new google.maps.OverlayView();
window['RichMarker'] = RichMarker;


/**
 * Returns the current visibility state of the marker.
 *
 * @return {boolean} The visiblity of the marker.
 */
RichMarker.prototype.getVisible = function() {
  return /** @type {boolean} */ (this.get('visible'));
};
RichMarker.prototype['getVisible'] = RichMarker.prototype.getVisible;


/**
 * Sets the visiblility state of the marker.
 *
 * @param {boolean} visible The visiblilty of the marker.
 */
RichMarker.prototype.setVisible = function(visible) {
  this.set('visible', visible);
};
RichMarker.prototype['setVisible'] = RichMarker.prototype.setVisible;


/**
 *  The visible changed event.
 */
RichMarker.prototype.visible_changed = function() {
  if (this.ready_) {
    this.markerWrapper_.style['display'] = this.getVisible() ? '' : 'none';
    this.draw();
  }
};
RichMarker.prototype['visible_changed'] = RichMarker.prototype.visible_changed;


/**
 * Sets the marker to be flat.
 *
 * @param {boolean} flat If the marker is to be flat or not.
 */
RichMarker.prototype.setFlat = function(flat) {
  this.set('flat', !!flat);
};
RichMarker.prototype['setFlat'] = RichMarker.prototype.setFlat;


/**
 * If the makrer is flat or not.
 *
 * @return {boolean} True the marker is flat.
 */
RichMarker.prototype.getFlat = function() {
  return /** @type {boolean} */ (this.get('flat'));
};
RichMarker.prototype['getFlat'] = RichMarker.prototype.getFlat;


/**
 * Get the width of the marker.
 *
 * @return {Number} The width of the marker.
 */
RichMarker.prototype.getWidth = function() {
  return /** @type {Number} */ (this.get('width'));
};
RichMarker.prototype['getWidth'] = RichMarker.prototype.getWidth;


/**
 * Get the height of the marker.
 *
 * @return {Number} The height of the marker.
 */
RichMarker.prototype.getHeight = function() {
  return /** @type {Number} */ (this.get('height'));
};
RichMarker.prototype['getHeight'] = RichMarker.prototype.getHeight;


/**
 * Sets the marker's box shadow.
 *
 * @param {string} shadow The box shadow to set.
 */
RichMarker.prototype.setShadow = function(shadow) {
  this.set('shadow', shadow);
  this.flat_changed();
};
RichMarker.prototype['setShadow'] = RichMarker.prototype.setShadow;


/**
 * Gets the marker's box shadow.
 *
 * @return {string} The box shadow.
 */
RichMarker.prototype.getShadow = function() {
  return /** @type {string} */ (this.get('shadow'));
};
RichMarker.prototype['getShadow'] = RichMarker.prototype.getShadow;


/**
 * Flat changed event.
 */
RichMarker.prototype.flat_changed = function() {
  if (!this.ready_) {
    return;
  }

  this.markerWrapper_.style['boxShadow'] =
      this.markerWrapper_.style['webkitBoxShadow'] =
      this.markerWrapper_.style['MozBoxShadow'] =
      this.getFlat() ? '' : this.getShadow();
};
RichMarker.prototype['flat_changed'] = RichMarker.prototype.flat_changed;


/**
 * Sets the zIndex of the marker.
 *
 * @param {Number} index The index to set.
 */
RichMarker.prototype.setZIndex = function(index) {
  this.set('zIndex', index);
};
RichMarker.prototype['setZIndex'] = RichMarker.prototype.setZIndex;


/**
 * Gets the zIndex of the marker.
 *
 * @return {Number} The zIndex of the marker.
 */
RichMarker.prototype.getZIndex = function() {
  return /** @type {Number} */ (this.get('zIndex'));
};
RichMarker.prototype['getZIndex'] = RichMarker.prototype.getZIndex;


/**
 * zIndex changed event.
 */
RichMarker.prototype.zIndex_changed = function() {
  if (this.getZIndex() && this.ready_) {
    this.markerWrapper_.style.zIndex = this.getZIndex();
  }
};
RichMarker.prototype['zIndex_changed'] = RichMarker.prototype.zIndex_changed;

/**
 * Whether the marker is draggable or not.
 *
 * @return {boolean} True if the marker is draggable.
 */
RichMarker.prototype.getDraggable = function() {
  return /** @type {boolean} */ (this.get('draggable'));
};
RichMarker.prototype['getDraggable'] = RichMarker.prototype.getDraggable;


/**
 * Sets the marker to be draggable or not.
 *
 * @param {boolean} draggable If the marker is draggable or not.
 */
RichMarker.prototype.setDraggable = function(draggable) {
  this.set('draggable', !!draggable);
};
RichMarker.prototype['setDraggable'] = RichMarker.prototype.setDraggable;


/**
 * Draggable property changed callback.
 */
RichMarker.prototype.draggable_changed = function() {
  if (this.ready_) {
    if (this.getDraggable()) {
      this.addDragging_(this.markerWrapper_);
    } else {
      this.removeDragListeners_();
    }
  }
};
RichMarker.prototype['draggable_changed'] =
    RichMarker.prototype.draggable_changed;


/**
 * Gets the postiton of the marker.
 *
 * @return {google.maps.LatLng} The position of the marker.
 */
RichMarker.prototype.getPosition = function() {
  return /** @type {google.maps.LatLng} */ (this.get('position'));
};
RichMarker.prototype['getPosition'] = RichMarker.prototype.getPosition;


/**
 * Sets the position of the marker.
 *
 * @param {google.maps.LatLng} position The position to set.
 */
RichMarker.prototype.setPosition = function(position) {
  this.set('position', position);
};
RichMarker.prototype['setPosition'] = RichMarker.prototype.setPosition;


/**
 * Position changed event.
 */
RichMarker.prototype.position_changed = function() {
  this.draw();
};
RichMarker.prototype['position_changed'] =
    RichMarker.prototype.position_changed;


/**
 * Gets the anchor.
 *
 * @return {google.maps.Size} The position of the anchor.
 */
RichMarker.prototype.getAnchor = function() {
  return /** @type {google.maps.Size} */ (this.get('anchor'));
};
RichMarker.prototype['getAnchor'] = RichMarker.prototype.getAnchor;


/**
 * Sets the anchor.
 *
 * @param {RichMarkerPosition|google.maps.Size} anchor The anchor to set.
 */
RichMarker.prototype.setAnchor = function(anchor) {
  this.set('anchor', anchor);
};
RichMarker.prototype['setAnchor'] = RichMarker.prototype.setAnchor;


/**
 * Anchor changed event.
 */
RichMarker.prototype.anchor_changed = function() {
  this.draw();
};
RichMarker.prototype['anchor_changed'] = RichMarker.prototype.anchor_changed;


/**
 * Converts a HTML string to a document fragment.
 *
 * @param {string} htmlString The HTML string to convert.
 * @return {Node} A HTML document fragment.
 * @private
 */
RichMarker.prototype.htmlToDocumentFragment_ = function(htmlString) {
  var tempDiv = document.createElement('DIV');
  tempDiv.innerHTML = htmlString;
  if (tempDiv.childNodes.length == 1) {
    return /** @type {!Node} */ (tempDiv.removeChild(tempDiv.firstChild));
  } else {
    var fragment = document.createDocumentFragment();
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
    return fragment;
  }
};


/**
 * Removes all children from the node.
 *
 * @param {Node} node The node to remove all children from.
 * @private
 */
RichMarker.prototype.removeChildren_ = function(node) {
  if (!node) {
    return;
  }

  var child;
  while (child = node.firstChild) {
    node.removeChild(child);
  }
};


/**
 * Sets the content of the marker.
 *
 * @param {string|Node} content The content to set.
 */
RichMarker.prototype.setContent = function(content) {
  this.set('content', content);
};
RichMarker.prototype['setContent'] = RichMarker.prototype.setContent;


/**
 * Get the content of the marker.
 *
 * @return {string|Node} The marker content.
 */
RichMarker.prototype.getContent = function() {
  return /** @type {Node|string} */ (this.get('content'));
};
RichMarker.prototype['getContent'] = RichMarker.prototype.getContent;


/**
 * Sets the marker content and adds loading events to images
 */
RichMarker.prototype.content_changed = function() {
  if (!this.markerContent_) {
    // Marker content area doesnt exist.
    return;
  }

  this.removeChildren_(this.markerContent_);
  var content = this.getContent();
  if (content) {
    if (typeof content == 'string') {
      content = content.replace(/^\s*([\S\s]*)\b\s*$/, '$1');
      content = this.htmlToDocumentFragment_(content);
    }
    this.markerContent_.appendChild(content);

    var that = this;
    var images = this.markerContent_.getElementsByTagName('IMG');
    for (var i = 0, image; image = images[i]; i++) {
      // By default, a browser lets a image be dragged outside of the browser,
      // so by calling preventDefault we stop this behaviour and allow the image
      // to be dragged around the map and now out of the browser and onto the
      // desktop.
      google.maps.event.addDomListener(image, 'mousedown', function(e) {
        if (that.getDraggable()) {
          if (e.preventDefault) {
            e.preventDefault();
          }
          e.returnValue = false;
        }
      });

      // Because we don't know the size of an image till it loads, add a
      // listener to the image load so the marker can resize and reposition
      // itself to be the correct height.
      google.maps.event.addDomListener(image, 'load', function() {
        that.draw();
      });
    }

    google.maps.event.trigger(this, 'domready');
  }

  if (this.ready_) {
    this.draw();
  }
};
RichMarker.prototype['content_changed'] = RichMarker.prototype.content_changed;

/**
 * Sets the cursor.
 *
 * @param {string} whichCursor What cursor to show.
 * @private
 */
RichMarker.prototype.setCursor_ = function(whichCursor) {
  if (!this.ready_) {
    return;
  }

  var cursor = '';
  if (navigator.userAgent.indexOf('Gecko/') !== -1) {
    // Moz has some nice cursors :)
    if (whichCursor == 'dragging') {
      cursor = '-moz-grabbing';
    }

    if (whichCursor == 'dragready') {
      cursor = '-moz-grab';
    }

    if (whichCursor == 'draggable') {
      cursor = 'pointer';
    }
  } else {
    if (whichCursor == 'dragging' || whichCursor == 'dragready') {
      cursor = 'move';
    }

    if (whichCursor == 'draggable') {
      cursor = 'pointer';
    }
  }

  if (this.markerWrapper_.style.cursor != cursor) {
    this.markerWrapper_.style.cursor = cursor;
  }
};

/**
 * Start dragging.
 *
 * @param {Event} e The event.
 */
RichMarker.prototype.startDrag = function(e) {
  if (!this.getDraggable()) {
    return;
  }

  if (!this.dragging_) {
    this.dragging_ = true;
    var map = this.getMap();
    this.mapDraggable_ = map.get('draggable');
    map.set('draggable', false);

    // Store the current mouse position
    this.mouseX_ = e.clientX;
    this.mouseY_ = e.clientY;

    this.setCursor_('dragready');

    // Stop the text from being selectable while being dragged
    this.markerWrapper_.style['MozUserSelect'] = 'none';
    this.markerWrapper_.style['KhtmlUserSelect'] = 'none';
    this.markerWrapper_.style['WebkitUserSelect'] = 'none';

    this.markerWrapper_['unselectable'] = 'on';
    this.markerWrapper_['onselectstart'] = function() {
      return false;
    };

    this.addDraggingListeners_();

    google.maps.event.trigger(this, 'dragstart');
  }
};


/**
 * Stop dragging.
 */
RichMarker.prototype.stopDrag = function() {
  if (!this.getDraggable()) {
    return;
  }

  if (this.dragging_) {
    this.dragging_ = false;
    this.getMap().set('draggable', this.mapDraggable_);
    this.mouseX_ = this.mouseY_ = this.mapDraggable_ = null;

    // Allow the text to be selectable again
    this.markerWrapper_.style['MozUserSelect'] = '';
    this.markerWrapper_.style['KhtmlUserSelect'] = '';
    this.markerWrapper_.style['WebkitUserSelect'] = '';
    this.markerWrapper_['unselectable'] = 'off';
    this.markerWrapper_['onselectstart'] = function() {};

    this.removeDraggingListeners_();

    this.setCursor_('draggable');
    google.maps.event.trigger(this, 'dragend');

    this.draw();
  }
};


/**
 * Handles the drag event.
 *
 * @param {Event} e The event.
 */
RichMarker.prototype.drag = function(e) {
  if (!this.getDraggable() || !this.dragging_) {
    // This object isn't draggable or we have stopped dragging
    this.stopDrag();
    return;
  }

  var dx = this.mouseX_ - e.clientX;
  var dy = this.mouseY_ - e.clientY;

  this.mouseX_ = e.clientX;
  this.mouseY_ = e.clientY;

  var left = parseInt(this.markerWrapper_.style['left'], 10) - dx;
  var top = parseInt(this.markerWrapper_.style['top'], 10) - dy;

  this.markerWrapper_.style['left'] = left + 'px';
  this.markerWrapper_.style['top'] = top + 'px';

  var offset = this.getOffset_();

  // Set the position property and adjust for the anchor offset
  var point = new google.maps.Point(left - offset.width, top - offset.height);
  var projection = this.getProjection();
  this.setPosition(projection.fromDivPixelToLatLng(point));

  this.setCursor_('dragging');
  google.maps.event.trigger(this, 'drag');
};


/**
 * Removes the drag listeners associated with the marker.
 *
 * @private
 */
RichMarker.prototype.removeDragListeners_ = function() {
  if (this.draggableListener_) {
    google.maps.event.removeListener(this.draggableListener_);
    delete this.draggableListener_;
  }
  this.setCursor_('');
};


/**
 * Add dragability events to the marker.
 *
 * @param {Node} node The node to apply dragging to.
 * @private
 */
RichMarker.prototype.addDragging_ = function(node) {
  if (!node) {
    return;
  }

  var that = this;
  this.draggableListener_ =
    google.maps.event.addDomListener(node, 'mousedown', function(e) {
      that.startDrag(e);
    });

  this.setCursor_('draggable');
};


/**
 * Add dragging listeners.
 *
 * @private
 */
RichMarker.prototype.addDraggingListeners_ = function() {
  var that = this;
  if (this.markerWrapper_.setCapture) {
    this.markerWrapper_.setCapture(true);
    this.draggingListeners_ = [
      google.maps.event.addDomListener(this.markerWrapper_, 'mousemove', function(e) {
        that.drag(e);
      }, true),
      google.maps.event.addDomListener(this.markerWrapper_, 'mouseup', function() {
        that.stopDrag();
        that.markerWrapper_.releaseCapture();
      }, true)
    ];
  } else {
    this.draggingListeners_ = [
      google.maps.event.addDomListener(window, 'mousemove', function(e) {
        that.drag(e);
      }, true),
      google.maps.event.addDomListener(window, 'mouseup', function() {
        that.stopDrag();
      }, true)
    ];
  }
};


/**
 * Remove dragging listeners.
 *
 * @private
 */
RichMarker.prototype.removeDraggingListeners_ = function() {
  if (this.draggingListeners_) {
    for (var i = 0, listener; listener = this.draggingListeners_[i]; i++) {
      google.maps.event.removeListener(listener);
    }
    this.draggingListeners_.length = 0;
  }
};


/**
 * Get the anchor offset.
 *
 * @return {google.maps.Size} The size offset.
 * @private
 */
RichMarker.prototype.getOffset_ = function() {
  var anchor = this.getAnchor();
  if (typeof anchor == 'object') {
    return /** @type {google.maps.Size} */ (anchor);
  }

  var offset = new google.maps.Size(0, 0);
  if (!this.markerContent_) {
    return offset;
  }

  var width = this.markerContent_.offsetWidth;
  var height = this.markerContent_.offsetHeight;

  switch (anchor) {
   case RichMarkerPosition['TOP_LEFT']:
     break;
   case RichMarkerPosition['TOP']:
     offset.width = -width / 2;
     break;
   case RichMarkerPosition['TOP_RIGHT']:
     offset.width = -width;
     break;
   case RichMarkerPosition['LEFT']:
     offset.height = -height / 2;
     break;
   case RichMarkerPosition['MIDDLE']:
     offset.width = -width / 2;
     offset.height = -height / 2;
     break;
   case RichMarkerPosition['RIGHT']:
     offset.width = -width;
     offset.height = -height / 2;
     break;
   case RichMarkerPosition['BOTTOM_LEFT']:
     offset.height = -height;
     break;
   case RichMarkerPosition['BOTTOM']:
     offset.width = -width / 2;
     offset.height = -height;
     break;
   case RichMarkerPosition['BOTTOM_RIGHT']:
     offset.width = -width;
     offset.height = -height;
     break;
  }

  return offset;
};


/**
 * Adding the marker to a map.
 * Implementing the interface.
 */
RichMarker.prototype.onAdd = function() {
  if (!this.markerWrapper_) {
    this.markerWrapper_ = document.createElement('DIV');
    this.markerWrapper_.style['position'] = 'absolute';
  }

  if (this.getZIndex()) {
    this.markerWrapper_.style['zIndex'] = this.getZIndex();
  }

  this.markerWrapper_.style['display'] = this.getVisible() ? '' : 'none';

  if (!this.markerContent_) {
    this.markerContent_ = document.createElement('DIV');
    this.markerWrapper_.appendChild(this.markerContent_);

    var that = this;
    google.maps.event.addDomListener(this.markerContent_, 'click', function(e) {
      google.maps.event.trigger(that, 'click', e);
    });
    google.maps.event.addDomListener(this.markerContent_, 'mouseover', function(e) {
      google.maps.event.trigger(that, 'mouseover', e);
    });
    google.maps.event.addDomListener(this.markerContent_, 'mouseout', function(e) {
      google.maps.event.trigger(that, 'mouseout', e);
    });
  }

  this.ready_ = true;
  this.content_changed();
  this.flat_changed();
  this.draggable_changed();

  var panes = this.getPanes();
  if (panes) {
    panes.overlayMouseTarget.appendChild(this.markerWrapper_);
  }

  google.maps.event.trigger(this, 'ready');
};
RichMarker.prototype['onAdd'] = RichMarker.prototype.onAdd;


/**
 * Impelementing the interface.
 */
RichMarker.prototype.draw = function() {
  if (!this.ready_ || this.dragging_) {
    return;
  }

  var projection = this.getProjection();

  if (!projection) {
    // The map projection is not ready yet so do nothing
    return;
  }

  var latLng = /** @type {google.maps.LatLng} */ (this.get('position'));
  var pos = projection.fromLatLngToDivPixel(latLng);

  var offset = this.getOffset_();
  this.markerWrapper_.style['top'] = (pos.y + offset.height) + 'px';
  this.markerWrapper_.style['left'] = (pos.x + offset.width) + 'px';

  var height = this.markerContent_.offsetHeight;
  var width = this.markerContent_.offsetWidth;

  if (width != this.get('width')) {
    this.set('width', width);
  }

  if (height != this.get('height')) {
    this.set('height', height);
  }
};
RichMarker.prototype['draw'] = RichMarker.prototype.draw;


/**
 * Removing a marker from the map.
 * Implementing the interface.
 */
RichMarker.prototype.onRemove = function() {
  if (this.markerWrapper_ && this.markerWrapper_.parentNode) {
    this.markerWrapper_.parentNode.removeChild(this.markerWrapper_);
  }
  this.removeDragListeners_();
};
RichMarker.prototype['onRemove'] = RichMarker.prototype.onRemove;


/**
 * RichMarker Anchor positions
 * @enum {number}
 */
var RichMarkerPosition = {
  'TOP_LEFT': 1,
  'TOP': 2,
  'TOP_RIGHT': 3,
  'LEFT': 4,
  'MIDDLE': 5,
  'RIGHT': 6,
  'BOTTOM_LEFT': 7,
  'BOTTOM': 8,
  'BOTTOM_RIGHT': 9
};
window['RichMarkerPosition'] = RichMarkerPosition;
